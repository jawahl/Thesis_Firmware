**This code was written for and tested on the Arducam IoTai ESP32 development board with the OV2640 2MP Camera Module. The Arduino core used with installation instructions can be found here: https://github.com/ArduCAM/ArduCAM_ESP32S_UNO_PSRAM**

The sensorNode_optimal folder contains Arduino files for the sensor node device. The device is configured to capture a burst of 5 images from the OV2640 camera module, compress to JPEG, and store the fifth (best) image. The image is then written to Flash memory via SPIFFS. The device advertises itself over BLE advertising channels, finds a connection, and continually transmits 23-byte packets of image data via the Characteristic value/notifications until complete image file transfer. Upon success, the device enters deep sleep mode for a variable amount of time, set by TIME_TO_SLEEP (in seconds). 

The GatewayNode_Firebase folder contains Arduino files for the gateway node device. The device is configured to continually scan for a specific BLE Server device with unique UUID's. Once found and connected, this device will receive notifications of changes in the server's Characteristic value and immediately write data chunks to Flash memory via SPIFFS. Once the connection is severed, the device attempts to connect to a local WiFi network, connects to Firebase, then pushes the image file from Flash to the Firebase database. If the upload is successful, the image is removed from Flash memory. The proper operation of this node relies on the Firebase-ESP32 Arduino library: https://github.com/mobizt/Firebase-ESP32

The firebaseScrape.py will connect to Firebase and decode the base-64 encoded string and download it locally as a JPEG image. To run this script, the following Python packages must be installed: firebase, firebase_admin, base64.

All other files in the Thesis_Firmware were created for testing and development purposes. Feel free to use these existing programs to test proper operation of individual functions for any respective hardware. 